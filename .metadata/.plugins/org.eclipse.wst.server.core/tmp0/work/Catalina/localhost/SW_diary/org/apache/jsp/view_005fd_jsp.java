/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.53
 * Generated at: 2019-11-24 17:48:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;
import diary.Diary;
import diary.DiaryDAO;

public final class view_005fd_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("diary.Diary");
    _jspx_imports_classes.add("diary.DiaryDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>오늘의 교환일기_change</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\"\r\n");
      out.write("      charset=\"UTF-8\" name=viewport content=\"width=device-width, initial-scale=1, user-scalable=0\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("@font-face { \r\n");
      out.write("\tfont-family: 'Chosunilbo_myungjo';\r\n");
      out.write(" \tsrc: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_one@1.0/Chosunilbo_myungjo.woff') format('woff'); \r\n");
      out.write(" \tfont-weight: normal; \r\n");
      out.write("\t font-style: normal; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body{\r\n");
      out.write("\tmargin: 0px auto;\r\n");
      out.write("\tbackground-color: #FFFFFF;\r\n");
      out.write("\tbox-sizing : border-box;\r\n");
      out.write("\tfont-family: Chosunilbo_myungjo;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("div.top{\r\n");
      out.write("\tbackground: #00218c;\r\n");
      out.write("    position: relative;\r\n");
      out.write("\ttop:0;\r\n");
      out.write("    left: 0;\r\n");
      out.write("    right: 0;\r\n");
      out.write("\tbox-sizing : border-box;\r\n");
      out.write("    height: 70px;\r\n");
      out.write("    z-index: 1;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("}\r\n");
      out.write("p.title{\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tfont-size: 2em;\r\n");
      out.write("\tcolor: #00218c;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("p.ymd{\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tfont-size: 1.3em;\r\n");
      out.write("\tcolor: #353c54;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div.weather{\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tfont-size: 1.3em;\r\n");
      out.write("\tcolor: #353c54;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textarea{\r\n");
      out.write("\tfont-size: 150%;\t\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\theight: 45%;\r\n");
      out.write("\tborder:1px solid #00218c;\r\n");
      out.write("\tpadding:5px;\r\n");
      out.write("\tmargin-top: 40px;\r\n");
      out.write("\tmargin-left: 10%;\r\n");
      out.write("\tfont-family: Chosunilbo_myungjo;\r\n");
      out.write("\tfont-size: 1.7em;\r\n");
      out.write("\tfloat: top;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("input.finish{\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\tbackground-color: #00218c;\r\n");
      out.write("\tcolor: #FFFFFF;\r\n");
      out.write("\tfont-size: 2em;\r\n");
      out.write("\theight: 10%;\r\n");
      out.write("\tmargin-left: 10%;\r\n");
      out.write("\tmargin-top: 40px;\r\n");
      out.write("\tfont-family: Chosunilbo_myungjo;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("a.finish{\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\tbackground-color: #00218c;\r\n");
      out.write("\tcolor: #FFFFFF;\r\n");
      out.write("\tfont-size: 2em;\r\n");
      out.write("\theight: 10%;\r\n");
      out.write("\tmargin-left: 10%;\r\n");
      out.write("\tmargin-top: 40px;\r\n");
      out.write("\tfont-family: Chosunilbo_myungjo;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");

        String userID = null;
        if(session.getAttribute("userID")!=null){
            userID = (String) session.getAttribute("userID");
        }
        int diaryID = 0;
        if(request.getParameter("diaryID")!=null)
        {
        	diaryID = Integer.parseInt(request.getParameter("diaryID"));
        }
        if(diaryID==0){
        	PrintWriter script = response.getWriter();
			script.println("<script>");
			script.println("alert('유효하지 않은 글입니다.'.)");
			script.println("location.href='diary.jsp'");
			script.println("</script>");
        }
        Diary diary = new DiaryDAO().getDiary(diaryID);
    
      out.write("\r\n");
      out.write("\t<div class=\"top\"></div>\r\n");
      out.write("\t<p class=\"title\">\r\n");
      out.write("\t\t네 일기\r\n");
      out.write("\t</p>\r\n");
      out.write("    <p class=\"ymd\">\r\n");
      out.write("\t날짜 : ");
      out.print( diary.getDiaryDate().substring(0,4)+"년"+diary.getDiaryDate().substring(5,7)+"월"+diary.getDiaryDate().substring(8,10)+"일");
      out.write("\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<div class=\"weather\">\r\n");
      out.write("\t날씨 :\r\n");
      out.write("\t");
if(diary.getWeather().equals("sunny")){ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"sunny\" checked> 맑음\r\n");
      out.write("\t");
} else{ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"sunny\"> 맑음\r\n");
      out.write("\t");
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
if(diary.getWeather().equals("cloudy")){ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"cloudy\" checked> 흐림\r\n");
      out.write("\t");
} else{ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"cloudy\"> 흐림\r\n");
      out.write("\t");
} 
if(diary.getWeather().equals("rain")){ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"rain\" checked> 비\r\n");
      out.write("\t");
} else{ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"rain\"> 비\r\n");
      out.write("\t");
} 
if(diary.getWeather().equals("snow")){ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"snow\" checked> 눈\r\n");
      out.write("\t");
} else{ 
      out.write("\r\n");
      out.write("\t<input type=\"radio\" name=\"weather\" value=\"snowy\"> 눈\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"write\">\r\n");
      out.write("\r\n");
      out.write("\t<textarea class=\"form-control\" name=\"diary\" placeholder=\"\" style=\"height: 500px; width: 465px;\">");
      out.print(diary.getDiaryContent().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;") );
      out.write("\r\n");
      out.write("\t</textarea>\r\n");
      out.write("     </div>\r\n");
      out.write("\t<a href=\"day.jsp\"><input class=\"finish\" type=\"button\" name=\"finish\" value=\"확인\" ></a>\r\n");
      out.write("            ");

            	if(userID != null && userID.equals(diary.getUserID())){
            
      out.write("\r\n");
      out.write("    <a href=\"update_d.jsp?diaryID=");
      out.print(diaryID );
      out.write("\"><input class=\"finish\" type=\"button\" name=\"finish\" value=\"수정\" ></a>\r\n");
      out.write("    <a onclick=\"return confirm('정말로 삭제하시겠습니까?')\" href=\"deleteAction_d.jsp?diaryID=");
      out.print(diaryID );
      out.write("\"><input class=\"finish\" type=\"button\" name=\"finish\" value=\"삭제\" ></a>\r\n");
      out.write("            ");

            	}
            
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
